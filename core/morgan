import copy


class morgan:
    def __getMorgan(self, sub):
        newweights = {x: 0 for x in sub}
        self.__buffer = 0
        while self.__accept(newweights):
            weights = copy.copy(newweights)
            for i in sub:
                newweights[i] = sum([weights[x] for x in self.connections[i]])
        return newweights

    def __accept(self, numb):
        """
        функция остановки для алгоритма моргана. останавливает поиск после первого простоя улучшения.
        """
        numl = len(set(numb.values()))

        if self.__buffer == numl:
            return False
        self.__buffer = numl
        return True

    def __prepare(self):
        self.connections = {x: {} for x in range(len(self.data['atoms']))}

        for i in self.data['bonds']:
            self.connections[i[0]][i[1]] = self.connections[i[1]][i[0]] = 1
